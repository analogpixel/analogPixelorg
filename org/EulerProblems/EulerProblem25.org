* Problem
  The Fibonacci sequence is defined by the recurrence relation:

  Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
  Hence the first 12 terms will be:

  F1 = 1
  F2 = 1
  F3 = 2
  F4 = 3
  F5 = 5
  F6 = 8
  F7 = 13
  F8 = 21
  F9 = 34
  F10 = 55
  F11 = 89
  F12 = 144
  The 12th term, F12, is the first term to contain three digits.

  What is the first term in the Fibonacci sequence to contain 1000 digits?


* Solution
  For Some reason I thought this was supposed to go to 1 million digits, so I wrote a string adding function that could handle that. Then someone pointed out I only needed 1000 digits, which is much easier.

  #+begin_src python
  import math

  b = "1"
  next = "1"
  i = 1
  MAX = 1000

  def add(a,b):

      a =  "0" * (len(b) - len(a)) + a
      c = 0
      output = ""

      for i in xrange( len(b) -1, -1, -1):
          t = int(a[i]) + int(b[i]) + c
          if t > 9:
              c = 1
              t = t - 10
          else:
              c = 0

          output += str(t)

      if c > 0:
          output += str(c)

      return output[::-1]


  while True:
      a = next
      next = add( b, next)
      b = a
      i = i + 1

      if len(next)> MAX - 1:
          print i+1
          break



  #+end_src


  Here it is in C trying to figure it out with long numbers

  #+begin_src c
  #include <stdio.h>
  #include <stdlib.h>
  #include <math.h>


  int main() {



      unsigned  long b = 1;
      int i = 2;
      unsigned long n =1;
      unsigned  long a = 0;

      int nDigits = 0;

      while( nDigits < 1000000) {
          i = i + 1;
          a = n;
          n = b + n;
          b = a;
          nDigits = floor(log10(abs(n))) + 1;
      }

      printf("solution %d\n", i  );
      return 0;
   }


  #+end_src


@TAGS C, Fibonacci
