* Problem
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

* Solution
** Clojure
   #+begin_src clojure
   (defn fib-step [[a b]] [b (+ a b)])
   (reduce +  (take-while #(< % 4000000 ) (filter even? (map first  (iterate fib-step [0 1])))))
   #+end_src

** Python
   #+begin_src python
   def fib(a,b):
       if a > 4000000:
           return [0]

       return [a] + fib(b,a+b)

   print sum ( [f for f in fib(1.0,2.0) if (f % 2 == 0 and f <4000000) ] )
   #+end_src


@TAGS recursive,fibonacci
